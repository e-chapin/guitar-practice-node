{"version":3,"sources":["components/practice-item-form.tsx","components/practice-item.tsx","components/practice-item-list.tsx","index.tsx"],"names":["PracticeItemForm","props","inputRef","React","_React$useState","_React$useState2","Object","slicedToArray","formState","setFormState","react","className","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newPracticeItem","id","text","is_completed","handlePracticeItemCreate","current","handleInputEnter","PracticeItemHandler","react_default","a","createElement","onClick","handlePracticeItemComplete","item","onBlur","handlePracticeItemBlur","handlePracticeItemUpdate","handlePracticeItemRemove","PracticeItem","items","map","practice_item","PracticeItemApp","useState","setItems","getItems","fetch","then","response","data","practiceItems","JSON","parse","useEffect","practice_item_form","method","headers","Content-Type","body","stringify","practice_item_list","newPracticeItemState","toConsumableArray","find","length","classList","add","remove","rootElement","document","getElementById","render","src_PracticeItemApp"],"mappings":"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","file":"static/js/main.8d476490.chunk.js","sourcesContent":["// Import dependencies\nimport * as React from 'react';\nimport shortid from 'shortid';\n\nimport {\n  PracticeItemInterface,\n  PracticeItemFormInterface\n} from './../interfaces';\n\nconst PracticeItemForm = (props: PracticeItemFormInterface) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [formState, setFormState] = React.useState('');\n\n  // handle practice item input change\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setFormState(event.target.value);\n  }\n\n  function handleInputEnter(event: React.KeyboardEvent) {\n    if (event.key == 'Enter') {\n      const newPracticeItem: PracticeItemInterface = {\n        id: '',\n        text: formState,\n        is_completed: false\n      };\n      props.handlePracticeItemCreate(newPracticeItem);\n\n      // reset ref\n      if (inputRef && inputRef.current) {\n        inputRef.current.value = '';\n      }\n    }\n  }\n\n  return (\n    <div className=\"practice-item-form\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder=\"Enter new Practice Item\"\n        onChange={(event) => handleInputChange(event)}\n        onKeyPress={(event) => handleInputEnter(event)}\n      />\n    </div>\n  );\n};\n\nexport default PracticeItemForm;\n","import React, { Component } from 'react';\nimport { PracticeItemHandlerInterface } from './../interfaces';\n\n// PracticeItemComponent\n\nconst PracticeItemHandler = (props: PracticeItemHandlerInterface) => {\n  return (\n    <div className=\"practice-item item\">\n      <div onClick={() => props.handlePracticeItemComplete(props.item.id)}>\n        {props.item.is_completed ? (\n          <span className=\"practice-item-checked\">âœ”</span>\n        ) : (\n          <span className=\"practice-item-unchecked\" />\n        )}\n      </div>\n      <div className=\"practice-item-input-wrapper\">\n        <input\n          type=\"text\"\n          value={props.item.text}\n          onBlur={(event: React.ChangeEvent<HTMLInputElement>) =>\n            props.handlePracticeItemBlur(event, props.item.id)\n          }\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            props.handlePracticeItemUpdate(event, props.item.id)\n          }\n        />\n      </div>\n\n      <div\n        className=\"item-remove\"\n        onClick={() => props.handlePracticeItemRemove(props.item.id)}\n      >\n        x\n      </div>\n    </div>\n  );\n};\n\nexport default PracticeItemHandler;\n","import React, { Component } from 'react';\n\nimport PracticeItemHandler from './practice-item';\n\nimport { PracticeItemListInterface } from './../interfaces';\n\n// PracticeItemList\n\nconst PracticeItem = (props: PracticeItemListInterface) => {\n  return (\n    <div className=\"practice-item-list\">\n      <ul>\n        {props.items.map((item) => (\n          <li key={item.id}>\n            <PracticeItemHandler\n              item={item}\n              handlePracticeItemUpdate={props.handlePracticeItemUpdate}\n              handlePracticeItemBlur={props.handlePracticeItemBlur}\n              handlePracticeItemComplete={props.handlePracticeItemComplete}\n              handlePracticeItemRemove={props.handlePracticeItemRemove}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default PracticeItem;\n","// Import dependencies\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\n// Import components\nimport PracticeItemForm from './components/practice-item-form';\nimport PracticeItemList from './components/practice-item-list';\n// Import interfaces\nimport { PracticeItemInterface } from './interfaces';\n\n// Import styles\nimport './styles/styles.css';\n\nconst PracticeItemApp = () => {\n  const [items, setItems] = React.useState<PracticeItemInterface[]>([]);\n\n  useEffect(() => {\n    getItems();\n  }, []);\n\n  function getItems() {\n    fetch('/api/practice-item')\n      .then((response) => {\n        return response.text();\n      })\n      .then((data) => {\n        var practiceItems = JSON.parse(data);\n        setItems(practiceItems);\n      });\n  }\n\n  // Creating new todo item\n  function handlePracticeItemCreate(item: PracticeItemInterface) {\n    fetch('/api/practice-item', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ item })\n    }).then((response) => {\n      getItems();\n      return response.text();\n    });\n  }\n\n  function handlePracticeItemUpdate(\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) {\n    const newPracticeItemState: PracticeItemInterface[] = [...items];\n    newPracticeItemState.find(\n      (item: PracticeItemInterface) => item.id === id\n    )!.text = event.target.value;\n\n    setItems(newPracticeItemState);\n  }\n\n  function handlePracticeItemRemove(id: string) {\n    fetch('/api/practice-item', {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ id })\n    }).then((response) => {\n      getItems();\n      return response.text();\n    });\n  }\n\n  function handlePracticeItemComplete(id: string) {\n    const newPracticeItemState: PracticeItemInterface[] = [...items];\n    const practiceItem: PracticeItemInterface = newPracticeItemState.find(\n      (item: PracticeItemInterface) => item.id === id\n    )!;\n    const is_completed: boolean = !practiceItem.is_completed;\n    fetch('/api/practice-item/complete', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ id, is_completed })\n    }).then((response) => {\n      getItems();\n      return response.text();\n    });\n  }\n\n  function handlePracticeItemBlur(\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add('practice-item-error');\n    } else {\n      event.target.classList.remove('practice-item-error');\n    }\n\n    const newPracticeItemState: PracticeItemInterface[] = [...items];\n    var item = newPracticeItemState.find(\n      (item: PracticeItemInterface) => item.id === id\n    )!;\n\n    if (item.text != event.target.value) {\n      item.text = event.target.value;\n    }\n\n    fetch('/api/practice-item/update', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ item })\n    }).then((response) => {\n      getItems();\n      return response.text();\n    });\n  }\n\n  return (\n    <div className=\"practice-item-app\">\n      <PracticeItemForm\n        items={items}\n        handlePracticeItemCreate={handlePracticeItemCreate}\n      />\n      <PracticeItemList\n        items={items}\n        handlePracticeItemUpdate={handlePracticeItemUpdate}\n        handlePracticeItemRemove={handlePracticeItemRemove}\n        handlePracticeItemComplete={handlePracticeItemComplete}\n        handlePracticeItemBlur={handlePracticeItemBlur}\n      />\n    </div>\n  );\n}; // end PracticeItemApp\n\n// Render the App in the DOM\nconst rootElement = document.getElementById('root');\nrender(<PracticeItemApp />, rootElement);\n"],"sourceRoot":""}