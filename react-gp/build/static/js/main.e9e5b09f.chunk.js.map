{"version":3,"sources":["components/practice-item-form.tsx","components/practice-item.tsx","components/practice-item-list.tsx","index.tsx"],"names":["PracticeItemForm","props","inputRef","React","_React$useState","_React$useState2","Object","slicedToArray","formState","setFormState","react","className","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newPracticeItem","id","shortid","generate","text","isCompleted","handlePracticeItemCreate","current","handleInputEnter","PracticeItemHandler","react_default","a","createElement","onClick","handlePracticeItemComplete","item","onBlur","handlePracticeItemBlur","handlePracticeItemUpdate","handlePracticeItemRemove","PracticeItem","items","map","practice_item","PracticeItemApp","useState","setItems","useEffect","fetch","then","response","data","practice_item_form","newPracticeItemState","toConsumableArray","push","practice_item_list","find","filter","practiceItem","length","classList","add","remove","rootElement","document","getElementById","render","src_PracticeItemApp"],"mappings":"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","file":"static/js/main.e9e5b09f.chunk.js","sourcesContent":["// Import dependencies\nimport * as React from 'react';\nimport shortid from 'shortid';\n\nimport {\n  PracticeItemInterface,\n  PracticeItemFormInterface\n} from './../interfaces';\n\nconst PracticeItemForm = (props: PracticeItemFormInterface) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [formState, setFormState] = React.useState('');\n\n  // handle practice item input change\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setFormState(event.target.value);\n  }\n\n  function handleInputEnter(event: React.KeyboardEvent) {\n    if (event.key == 'Enter') {\n      const newPracticeItem: PracticeItemInterface = {\n        id: shortid.generate(),\n        text: formState,\n        isCompleted: false\n      };\n      props.handlePracticeItemCreate(newPracticeItem);\n\n      // reset ref\n      if (inputRef && inputRef.current) {\n        inputRef.current.value = '';\n      }\n    }\n  }\n\n  return (\n    <div className=\"practice-item-form\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder=\"Enter new Practice Item\"\n        onChange={(event) => handleInputChange(event)}\n        onKeyPress={(event) => handleInputEnter(event)}\n      />\n    </div>\n  );\n};\n\nexport default PracticeItemForm;\n","import React, { Component } from 'react';\nimport { PracticeItemHandlerInterface } from './../interfaces';\n\n// PracticeItemComponent\n\nconst PracticeItemHandler = (props: PracticeItemHandlerInterface) => {\n  return (\n    <div className=\"practice-item item\">\n      <div onClick={() => props.handlePracticeItemComplete(props.item.id)}>\n        {props.item.isCompleted ? (\n          <span className=\"practice-item-checked\">âœ”</span>\n        ) : (\n          <span className=\"practice-item-unchecked\" />\n        )}\n      </div>\n      <div className=\"practice-item-input-wrapper\">\n        <input\n          value={props.item.text}\n          onBlur={props.handlePracticeItemBlur}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            props.handlePracticeItemUpdate(event, props.item.id)\n          }\n        />\n      </div>\n\n      <div\n        className=\"item-remove\"\n        onClick={() => props.handlePracticeItemRemove(props.item.id)}\n      >\n        x\n      </div>\n    </div>\n  );\n};\n\nexport default PracticeItemHandler;\n","import React, { Component } from 'react';\n\nimport PracticeItemHandler from './practice-item';\n\nimport { PracticeItemListInterface } from './../interfaces';\n\n// PracticeItemList\n\nconst PracticeItem = (props: PracticeItemListInterface) => {\n  return (\n    <div className=\"practice-item-list\">\n      <ul>\n        {props.items.map((item) => (\n          <li key={item.id}>\n            <PracticeItemHandler\n              item={item}\n              handlePracticeItemUpdate={props.handlePracticeItemUpdate}\n              handlePracticeItemBlur={props.handlePracticeItemBlur}\n              handlePracticeItemComplete={props.handlePracticeItemComplete}\n              handlePracticeItemRemove={props.handlePracticeItemRemove}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default PracticeItem;\n","// Import dependencies\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\n// Import components\nimport PracticeItemForm from './components/practice-item-form';\nimport PracticeItemList from './components/practice-item-list';\n// Import interfaces\nimport { PracticeItemInterface } from './interfaces';\n\n// Import styles\nimport './styles/styles.css';\n\nconst PracticeItemApp = () => {\n  const [items, setItems] = React.useState<PracticeItemInterface[]>([]);\n\n  useEffect(() => {\n    debugger;\n    getItems();\n  }, []);\n\n  function getItems() {\n    fetch('http://localhost:3001/api/practice-items/all')\n      .then((response) => {\n        return response.text();\n      })\n      .then((data) => {\n        debugger;\n        //setItems(data);\n      });\n  }\n\n  // Creating new todo item\n  function handlePracticeItemCreate(item: PracticeItemInterface) {\n    // Prepare new todos state\n    const newPracticeItemState: PracticeItemInterface[] = [...items];\n    // Update new todos state\n    newPracticeItemState.push(item);\n    // Update todos state\n    setItems(newPracticeItemState);\n  }\n\n  function handlePracticeItemUpdate(\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) {\n    const newPracticeItemState: PracticeItemInterface[] = [...items];\n\n    newPracticeItemState.find(\n      (item: PracticeItemInterface) => item.id === id\n    )!.text = event.target.value;\n\n    setItems(newPracticeItemState);\n  }\n\n  function handlePracticeItemRemove(id: string) {\n    const newPracticeItemState: PracticeItemInterface[] = items.filter(\n      (item: PracticeItemInterface) => item.id !== id\n    );\n\n    setItems(newPracticeItemState);\n  }\n\n  function handlePracticeItemComplete(id: string) {\n    const newPracticeItemState: PracticeItemInterface[] = [...items];\n\n    const practiceItem: PracticeItemInterface = newPracticeItemState.find(\n      (item: PracticeItemInterface) => item.id === id\n    )!;\n\n    practiceItem.isCompleted = !practiceItem.isCompleted;\n\n    setItems(newPracticeItemState);\n  }\n\n  function handlePracticeItemBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add('practice-item-error');\n    } else {\n      event.target.classList.remove('practice-item-error');\n    }\n  }\n\n  return (\n    <div className=\"practice-item-app\">\n      <PracticeItemForm\n        items={items}\n        handlePracticeItemCreate={handlePracticeItemCreate}\n      />\n      <PracticeItemList\n        items={items}\n        handlePracticeItemUpdate={handlePracticeItemUpdate}\n        handlePracticeItemRemove={handlePracticeItemRemove}\n        handlePracticeItemComplete={handlePracticeItemComplete}\n        handlePracticeItemBlur={handlePracticeItemBlur}\n      />\n    </div>\n  );\n}; // end PracticeItemApp\n\n// Render the App in the DOM\nconst rootElement = document.getElementById('root');\nrender(<PracticeItemApp />, rootElement);\n"],"sourceRoot":""}